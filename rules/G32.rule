== Ne pas être arbitraire ==
La structure de votre code doit se justifier, et la raison doit en être communiquée par
cette structure. Si une structure semble arbitraire, les autres programmeurs pourraient se
croire autorisés à la modifier. Si une structure paraît cohérente tout au long du système,
les autres programmeurs l'emploieront et conserveront les conventions. Par exemple,
j'ai récemment intégré des modifications dans FitNesse et découvert que l'un des
contributeurs avait fait la chose suivante :
~~~
public class AliasLinkWidget extends ParentWidget
{
    public static class VariableExpandingWidgetRoot {
    ...
    ...
}
~~~
La classe VariableExpandingWidgetRoot n'a aucunement besoin de se trouver dans la
portée de AliasLinkWidget. Par ailleurs, d'autres classes sans rapport utilisent Alias
LinkWidget.VariableExpandingWidgetRoot. Ces classes n'ont aucunement besoin de
connaître AliasLinkWidget.
Le programmeur a peut-être placé VariableExpandingWidgetRoot dans AliasWidget
pour des raisons de commodité, ou peut-être qu'il pensait qu'elle devait absolument se
trouver dans la portée de AliasWidget. Quelle que soit la raison, le résultat est arbi-
traire. Les classes publiques qui ne sont pas des classes utilitaires d'une autre classe ne
doivent pas se trouver dans la portée d'une autre classe. Par convention, elles doivent
être publiques au niveau supérieur de leur paquetage.
